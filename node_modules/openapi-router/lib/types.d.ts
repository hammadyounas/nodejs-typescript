/// <reference types="express" />
import * as express from 'express';
import { ValidationError as JsonValidationError } from 'jsonschema';
export declare const OPENAPI_ERRORS = "OPENAPI_ERRORS";
export declare type ResponseValidationError = {
    type: string;
    name?: string;
    value?: any;
    error?: JsonValidationError;
};
export declare type ResponseValidationResult = {
    errors: ResponseValidationError[];
    isValid: boolean;
};
export declare type RequestValidationResult = {
    params: any;
    errors: RequestValidationError[];
    isValid: boolean;
};
export declare type RequestValidationError = {
    parameter?: string;
    location?: string;
    notFound: boolean;
    notImplemented: boolean;
    notAllowed: boolean;
    errors?: JsonValidationError[];
};
export declare type ResponseOptions = {
    ignoreInvalidHeaders?: boolean;
    ignoreMissingHeaders?: boolean;
    ignoreInvalidBody?: boolean;
    ignoreInvalidStatus?: boolean;
};
export declare type JsonApiError = {
    id: string;
    status?: string;
    code?: ErrorCode;
    title?: string;
    detail?: string;
    source?: {
        parameter?: string;
        pointer?: string;
    };
    meta?: any;
};
export declare enum ErrorScope {
    request = "request",
    response = "response",
}
export declare enum ErrorCode {
    NotImplemented = "NOT_IMPLEMENTED",
    MethodNotAllowed = "METHOD_NOT_ALLOWED",
    NotFound = "NOT_FOUND",
    BadRequest = "BAD_REQUEST",
    MissingParameter = "MISSING_PARAMETER",
    InvalidResponseHeader = "INVLAID_RESPONSE_HEADER",
    MissingResponseHeader = "MISSING_RESPONSE_HEADER",
    InvalidRepsonseBody = "INVALID_RESPONSE_BODY",
    InvalidResponseCode = "INVALID_RESPONSE_CODE",
}
export declare type RouteHandler = (req: express.Request & {
    openapi: RequestValidationResult;
}, res: express.Response & {
    openapi: ResponseValidationResult;
}, next?: express.NextFunction) => void | Promise<void>;
export declare namespace OpenAPI {
    type Schema = {
        swagger: '2.0';
        info: Info;
        host?: string;
        basePath?: string;
        schemes?: ['http' | 'https' | 'ws' | 'wss'];
        consumes?: string[];
        produces?: string[];
        paths: Paths;
        definitions?: Definitions;
        parameters?: ParameterDefinitions;
        responses?: ResponseDefinitions;
        securityDefinitions?: SecurityDefinitions;
        security?: SecurityRequirement[];
        tags?: Tag[];
        externalDocs?: ExternalDocumentation;
    };
    type Info = {
        version: string;
        title: string;
        description?: string;
        termsOfService?: string;
        contact?: Contact;
        license?: License;
    };
    type Paths = {
        [path: string]: PathItem;
    };
    type PathItem = {
        $ref?: string;
        get?: Operation;
        put?: Operation;
        post?: Operation;
        delete?: Operation;
        options?: Operation;
        head?: Operation;
        patch?: Operation;
        parameters?: (Parameter | Reference)[];
    };
    type Parameter = {
        name: string;
        in: 'query' | 'header' | 'path' | 'formData';
        description?: string;
        required?: boolean;
        type: PropertyType;
        format?: string;
        allowEmptyValue?: boolean;
        items?: Items;
        collectionFormat?: 'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi';
        default?: any;
        maximum?: number;
        exclusiveMaximum?: boolean;
    } | {
        name: string;
        in: 'body';
        description?: string;
        required?: boolean;
        schema: JsonSchema;
    };
    type Headers = {
        [name: string]: Header;
    };
    type Header = {
        description?: string;
        type: PropertyType;
        format?: string;
        items?: Items;
        collectionFormat?: 'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi';
        default?: any;
        maximum?: number;
        exclusiveMaximum?: boolean;
    };
    type Reference = {
        $ref: string;
    };
    type Items = {
        type: PropertyType;
        format?: string;
        items?: Items;
        collectionFormat?: 'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi';
        default?: any;
        maximum?: number;
        exclusiveMaximum?: boolean;
    };
    type Definitions = {
        [name: string]: any;
    };
    type ParameterDefinitions = {
        [name: string]: Parameter;
    };
    type Responses = {
        [httpStatusCode: string]: Response | Reference;
    };
    type ResponseDefinitions = {
        [name: string]: Response;
    };
    type Response = {
        description: string;
        schema?: JsonSchema;
        headers?: Headers;
        examples?: Examples;
    };
    type Examples = {
        [mimeType: string]: any;
    };
    type SecurityDefinitions = {
        [name: string]: SecurityScheme;
    };
    type SecurityScheme = {
        type: 'basic';
        description?: string;
    } | {
        type: 'apiKey';
        description?: string;
        name: string;
        in: 'header' | 'query';
    } | {
        type: 'oauth2';
        description?: string;
        name: string;
        authorizationUrl: string;
        tokenUrl: string;
        scopes: Scopes;
    };
    type Scopes = {
        [name: string]: string;
    };
    type SecurityRequirement = {
        [name: string]: string[];
    };
    type Tag = {
        name: string;
        description?: string;
        externalDocs?: ExternalDocumentation;
    };
    type ExternalDocumentation = {
        description?: string;
        url: string;
    };
    type Contact = {
        name?: string;
        url?: string;
        email?: string;
    };
    type License = {
        name: string;
        url?: string;
    };
    type Operation = {
        tags?: string[];
        summary?: string;
        description?: string;
        externalDocs?: ExternalDocumentation;
        operationId?: string;
        consumes?: string[];
        produces?: string[];
        parameters?: (Parameter | Reference)[];
        responses: Responses;
        schemes?: ['http' | 'https' | 'ws' | 'wss'];
        deprecated?: boolean;
        security?: SecurityRequirement[];
    };
    type JsonSchema = any;
    type TypePrimitive = 'string' | 'number' | 'integer' | 'boolean' | 'array' | 'file' | 'object';
    type PropertyType = TypePrimitive | [TypePrimitive];
}
