"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid");
const types_1 = require("./types");
function errorHandler(err, req, res, next) {
    if (err.code === types_1.OPENAPI_ERRORS && !res.headersSent) {
        switch (err.scope) {
            case types_1.ErrorScope.request: {
                const errors = [];
                let code = 200;
                for (const error of req.openapi.errors) {
                    if (error.notAllowed) {
                        // Method Not Allowed
                        errors.push({
                            id: uuid.v4(),
                            status: '405',
                            code: types_1.ErrorCode.MethodNotAllowed,
                            title: 'Method not allowed',
                        });
                        code = Math.max(405, code);
                    }
                    else if (error.notImplemented) {
                        // Method Not Allowed
                        errors.push({
                            id: uuid.v4(),
                            status: '501',
                            code: types_1.ErrorCode.NotImplemented,
                            title: 'Not implemented',
                        });
                        code = Math.max(501, code);
                    }
                    else if (!error.parameter && error.notFound) {
                        // Route Not Found
                        const e = {
                            id: uuid.v4(),
                            code: types_1.ErrorCode.NotFound,
                            status: '404',
                            title: 'Route not found',
                            detail: `Route '${req.method} ${req.path}' could not be found.  Refer to docs for a complete list of routes.`,
                        };
                        errors.push(e);
                        code = Math.max(404, code);
                    }
                    else if (error.parameter && error.notFound) {
                        // Parameter Not Found
                        errors.push({
                            id: uuid.v4(),
                            code: types_1.ErrorCode.MissingParameter,
                            status: '400',
                            title: 'Missing required parameter',
                            detail: `Required parameter '${error.parameter}' could not be found in ${error.location}.`,
                            source: {
                                parameter: error.parameter,
                            },
                        });
                        code = Math.max(400, code);
                    }
                    else if (error.parameter && Array.isArray(error.errors)) {
                        // Bad Parameter
                        error.errors.forEach(validationError => {
                            const instanceName = validationError.property.replace('instance', error.parameter);
                            const instanceType = instanceName === error.parameter ? 'Parameter' : 'Property';
                            const instanceValueDisplay = typeof validationError.instance === 'undefined'
                                ? ' '
                                : ` (${validationError.instance}) `;
                            errors.push({
                                id: uuid.v4(),
                                code: types_1.ErrorCode.BadRequest,
                                status: '400',
                                title: 'Request value is invalid',
                                detail: `${instanceType} '${instanceName}'${instanceValueDisplay}${validationError.message}.`,
                                source: {
                                    // TODO: return valid JSON Path for body parameters
                                    // SEE: http://jsonapi.org/format/#errors
                                    parameter: error.parameter,
                                },
                            });
                        });
                        code = Math.max(400, code);
                    }
                }
                res.status(code).json({ errors });
                break;
            }
            case types_1.ErrorScope.response: {
                const errors = res.openapi.errors
                    .map(error => {
                    switch (error.type) {
                        case 'INVALID_HEADER':
                            return {
                                id: uuid.v4(),
                                code: types_1.ErrorCode.InvalidResponseHeader,
                                status: '500',
                                title: 'Response header is invalid. (INTERNAL SERVER ERROR)',
                                detail: `Response header '${error.name}' ('${res.get(error.name)}') ${error.error.message}`,
                                source: {
                                    parameter: error.name,
                                },
                            };
                        case 'MISSING_HEADER':
                            return {
                                id: uuid.v4(),
                                code: types_1.ErrorCode.MissingResponseHeader,
                                status: '500',
                                title: 'Required response header is missing. (INTERNAL SERVER ERROR)',
                                detail: `Required response header '${error.name}' was missing from the original response.`,
                                source: {
                                    parameter: error.name,
                                },
                            };
                        case 'INVALID_BODY':
                            return {
                                id: uuid.v4(),
                                code: types_1.ErrorCode.InvalidRepsonseBody,
                                status: '500',
                                title: 'Response body is invalid. (INTERNAL SERVER ERROR)',
                                detail: `${error.error.property} ${error.error.message}`,
                                source: {},
                            };
                        case 'INVALID_STATUS':
                            return {
                                id: uuid.v4(),
                                code: types_1.ErrorCode.InvalidResponseCode,
                                status: '500',
                                title: 'Undefined response for status code. (INTERNAL SERVER ERROR)',
                                detail: `No response is defined for status code '${error.value}' and no default response is defined.`,
                                source: {},
                            };
                        default:
                            return null;
                    }
                })
                    .filter(x => x);
                res.status(500).json({ errors });
            }
        }
    }
    next(err);
}
exports.errorHandler = errorHandler;
//# sourceMappingURL=error-handler.js.map